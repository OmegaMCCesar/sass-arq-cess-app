rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ==== Helpers ====
    function isSignedIn() {
      return request.auth != null;
    }

    function userDoc(uid) {
      return get(/databases/$(database)/documents/users/$(uid));
    }

    function userRole() {
      return isSignedIn() ? (userDoc(request.auth.uid).data.role) : null;
    }

    function isSuper() {
      return userRole() == "superadmin";
    }

    function isAdmin() {
      return userRole() == "admin";
    }

    function isResidente() {
      return userRole() == "residente";
    }

    function isAdminOrAbove() {
      return isSuper() || isAdmin();
    }

    // ==== users (perfiles/roles) ====
    // Necesitamos que superadmin/admin puedan crear y actualizar
    match /users/{uid} {
      allow read: if isSignedIn() && (
        request.auth.uid == uid || isAdminOrAbove()
      );

      // Crear por super/admin (tu app hace esto con Auth secundario)
      allow create: if isAdminOrAbove();

      // Actualizar:
      // - super/admin: total
      // - el propio usuario: solo campos "seguros" (no role/email/uid)
      allow update: if isAdminOrAbove()
        || (isSignedIn() && request.auth.uid == uid
            && !( "role" in request.resource.data )
            && !( "email" in request.resource.data )
            && !( "uid" in request.resource.data ));

      // Borrado solo por superadmin
      allow delete: if isSuper();
    }

    // ==== workers (encargados/obreros) ====
    match /workers/{id} {
      allow read: if isSignedIn() && (isResidente() || isAdminOrAbove());

      // Crear por residente/admin/super
      allow create: if isSignedIn() && (isResidente() || isAdminOrAbove());

      // Update/Delete por creador (residente) o admin/super
      allow update, delete: if isSignedIn() && (
        isAdminOrAbove() || (isResidente() && resource.data.createdBy == request.auth.uid)
      );
    }

    // ==== cuadrillas ====
    match /cuadrillas/{id} {
      allow read: if isSignedIn() && (isResidente() || isAdminOrAbove());

      allow create: if isSignedIn() && (isResidente() || isAdminOrAbove());

      allow update, delete: if isSignedIn() && (
        isAdminOrAbove() || (isResidente() && resource.data.createdBy == request.auth.uid)
      );
    }

    // ==== baches (tareas con estados) ====
    match /baches/{id} {
      // Admin/super ven todos; residente solo los que registró
      allow read: if isSignedIn() && (
        isAdminOrAbove() || (isResidente() && resource.data.residenteUid == request.auth.uid)
      );

      // Crear:
      // - residente: debe ser el dueño del registro (residenteUid == su uid)
      // - admin/super: pueden crear para cualquiera
      allow create: if isSignedIn() && (
        isAdminOrAbove()
        || (isResidente() && request.resource.data.residenteUid == request.auth.uid)
      );

      // Update:
      // - admin/super total
      // - residente: solo si es su bache
      allow update: if isSignedIn() && (
        isAdminOrAbove() || (isResidente() && resource.data.residenteUid == request.auth.uid)
      );

      // Delete (si lo quieres): solo admin/super
      allow delete: if isAdminOrAbove();
    }

    // ==== calc_logs (bitácora de calculadora) ====
    match /calc_logs/{id} {
      // crear por cualquier usuario autenticado
      allow create: if isSignedIn();

      // lectura solo por admin/super (para proteger datos)
      allow read: if isAdminOrAbove();

      // no se actualiza ni borra (ajústalo si lo necesitas)
      allow update, delete: if false;
    }
  }
}
